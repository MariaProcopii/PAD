spring.application.name=gateway

# Logging for Troubleshooting
logging.level.org.springframework.cloud.gateway=TRACE
logging.level.org.springframework.cloud.gateway.filter=TRACE

# Enable trace logging for Spring Cloud Gateway to log requests
logging.level.org.springframework.web.reactive.function.server=TRACE
logging.level.reactor.ipc.netty.channel.ChannelOperationsHandler=TRACE

# Enable detailed logging for rate limiting filters and retries
logging.level.org.springframework.cloud.gateway.filter.ratelimit=DEBUG
logging.level.org.springframework.cloud.gateway.filter.RetryGatewayFilterFactory=DEBUG

#rrr
# Enable logging for the RetryGatewayFilterFactory to capture retries
logging.level.org.springframework.cloud.gateway.filter.factory.RetryGatewayFilterFactory=TRACE
logging.level.org.springframework.cloud.gateway.filter.RetryGatewayFilter=TRACE
logging.level.org.springframework.cloud.gateway.filter.ReactiveLoadBalancerClientFilter=TRACE



logging.level.org.springframework.web.reactive.function.client.ExchangeFunctions=TRACE

logging.level.org.springframework.cloud.gateway.circuitbreaker=TRACE
logging.level.org.springframework.cloud.circuitbreaker=TRACE

logging.level.io.github.resilience4j.timelimiter=DEBUG

server.port=8080
eureka.client.service-url.defaultZone=http://my-service-discovery-app:8761/eureka/


## Load Balancer Timeouts
spring.cloud.loadbalancer.service-discovery.timeout=5000
#spring.cloud.loadbalancer.retry.enabled=true
spring.cloud.gateway.filter.circuit-breaker.enabled=true

# Enable Round Robin load balancing
spring.cloud.loadbalancer.hint.user-service=round_robin
spring.cloud.loadbalancer.hint.cooking-blog-service=round_robin

# Configure Gateway Routes with Retry and Circuit Breaker
spring.cloud.gateway.routes[0].id=user-service
spring.cloud.gateway.routes[0].uri=lb://user-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/user/profile/edit/{id}
spring.cloud.gateway.routes[0].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[0].filters[0].args.fallbackUri=forward:/fallback

spring.cloud.gateway.routes[1].id=user-status
spring.cloud.gateway.routes[1].uri=lb://user-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/user/status
spring.cloud.gateway.routes[1].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[1].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[1].filters[0].args.fallbackUri=forward:/fallback

spring.cloud.gateway.routes[2].id=user-profile
spring.cloud.gateway.routes[2].uri=lb://user-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/user/profile/{id}
spring.cloud.gateway.routes[2].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[2].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[2].filters[0].args.fallbackUri=forward:/fallback

spring.cloud.gateway.routes[3].id=user-register
spring.cloud.gateway.routes[3].uri=lb://user-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/register
spring.cloud.gateway.routes[3].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[3].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[3].filters[0].args.fallbackUri=forward:/fallback

spring.cloud.gateway.routes[4].id=user-login
spring.cloud.gateway.routes[4].uri=lb://user-service
spring.cloud.gateway.routes[4].predicates[0]=Path=/login
spring.cloud.gateway.routes[4].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[4].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[4].filters[0].args.fallbackUri=forward:/fallback

spring.cloud.gateway.routes[5].id=cooking-blog-service
spring.cloud.gateway.routes[5].uri=lb://cooking-blog-service
spring.cloud.gateway.routes[5].predicates[0]=Path=/recipe
spring.cloud.gateway.routes[5].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[5].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[5].filters[0].args.fallbackUri=forward:/fallback

spring.cloud.gateway.routes[6].id=cooking-blog-service
spring.cloud.gateway.routes[6].uri=lb://cooking-blog-service
spring.cloud.gateway.routes[6].predicates[0]=Path=/recipe/post/{id}
spring.cloud.gateway.routes[6].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[6].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[6].filters[0].args.fallbackUri=forward:/fallback


spring.cloud.gateway.routes[7].id=cooking-blog-service
spring.cloud.gateway.routes[7].uri=lb://cooking-blog-service
spring.cloud.gateway.routes[7].predicates[0]=Path=/recipe/{id}
spring.cloud.gateway.routes[7].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[7].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[7].filters[0].args.fallbackUri=forward:/fallback

spring.cloud.gateway.routes[8].id=cooking-blog-service
spring.cloud.gateway.routes[8].uri=lb://cooking-blog-service
spring.cloud.gateway.routes[8].predicates[0]=Path=/recipe/edit/{id}
spring.cloud.gateway.routes[8].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[8].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[8].filters[0].args.fallbackUri=forward:/fallback


spring.cloud.gateway.routes[9].id=cooking-blog-service
spring.cloud.gateway.routes[9].uri=lb://cooking-blog-service
spring.cloud.gateway.routes[9].predicates[0]=Path=/blog/status
spring.cloud.gateway.routes[9].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[9].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[9].filters[0].args.fallbackUri=forward:/fallback

# WebSocket Route
spring.cloud.gateway.routes[10].id=websocket-route
spring.cloud.gateway.routes[10].uri=lb://cooking-blog-service
spring.cloud.gateway.routes[10].predicates[0]=Path=/ws/**
spring.cloud.gateway.routes[10].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[10].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[10].filters[0].args.fallbackUri=forward:/fallback

spring.cloud.gateway.routes[11].id=user-health
spring.cloud.gateway.routes[11].uri=lb://user-service
spring.cloud.gateway.routes[11].predicates[0]=Path=/user/health
spring.cloud.gateway.routes[11].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[11].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[11].filters[0].args.fallbackUri=forward:/fallback


spring.cloud.gateway.routes[12].id=cooking-blog-service
spring.cloud.gateway.routes[12].uri=lb://cooking-blog-service
spring.cloud.gateway.routes[12].predicates[0]=Path=/blog/health
spring.cloud.gateway.routes[12].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[12].filters[0].args.name=myServiceCircuitBreaker
spring.cloud.gateway.routes[12].filters[0].args.fallbackUri=forward:/fallback


# Retry Settings for CircuitBreakerRegistry
spring.cloud.gateway.default-filters[0].name=Retry
spring.cloud.gateway.default-filters[0].args.retries=9
spring.cloud.gateway.default-filters[0].args.methods=GET,POST,PUT,DELETE
spring.cloud.gateway.default-filters[0].args.statuses=TOO_MANY_REQUESTS,INTERNAL_SERVER_ERROR,SERVICE_UNAVAILABLE
spring.cloud.gateway.default-filters[0].args.exceptions=java.lang.Throwable

# Health check endpoint for load balancing
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true


# Circuit breaker settings using Resilience4j
resilience4j.circuitbreaker.instances.myServiceCircuitBreaker.slidingWindowSize=12
resilience4j.circuitbreaker.instances.myServiceCircuitBreaker.failureRateThreshold=100
resilience4j.circuitbreaker.instances.myServiceCircuitBreaker.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.myServiceCircuitBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.myServiceCircuitBreaker.minimumNumberOfCalls=12
resilience4j.circuitbreaker.instances.myServiceCircuitBreaker.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.myServiceCircuitBreaker.slidingWindowType=COUNT_BASED

resilience4j.timelimiter.instances.myServiceTimeLimiter.timeoutDuration=12s


# VERY IMPORTANT
spring.main.allow-bean-definition-overriding=true

#maybe delete this
spring.cloud.circuitbreaker.bulkhead.resilience4j.enabled=true
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Redis Configuration
spring.cache.type=redis
spring.data.redis.host=my-redis-db
spring.data.redis.port=6379
spring.cache.redis.time-to-live=3600s